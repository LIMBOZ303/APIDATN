#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('apidatn:server');
var http = require('http');
const socketio = require('socket.io');
const ChatMessage = require('../models/chatModel');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '2025');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Socket.io setup
 */
const io = socketio(server, {
  cors: {
    origin: "*", // Cho phép tất cả các nguồn kết nối
    methods: ["GET", "POST"]
  }
});

// Map để lưu trữ kết nối của người dùng
const userConnections = new Map();
let adminSocket = null;

// Xử lý kết nối Socket.IO
io.on('connection', (socket) => {
  console.log('New connection:', socket.id);
  
  // User đăng ký kết nối với ID của họ
  socket.on('registerUser', (userId) => {
    console.log(`User registered: ${userId}`);
    
    // Lưu socket của user vào map
    userConnections.set(userId, socket);
    
    // Thêm socket vào room riêng với userId
    socket.join(userId);
    
    // Khi user ngắt kết nối, xóa khỏi map
    socket.on('disconnect', () => {
      console.log(`User disconnected: ${userId}`);
      userConnections.delete(userId);
    });
  });
  
  // Admin đăng ký kết nối
  socket.on('registerAdmin', () => {
    console.log('Admin registered');
    
    // Lưu socket của admin
    adminSocket = socket;
    
    // Khi admin ngắt kết nối
    socket.on('disconnect', () => {
      console.log('Admin disconnected');
      adminSocket = null;
    });
  });
  
  // Xử lý khi admin hoặc user gửi tin nhắn
  socket.on('sendMessage', async (data) => {
    try {
      const { senderId, receiverId, message, senderType, messageType = 'text' } = data;
      
      // Lưu tin nhắn vào database
      const newMessage = await ChatMessage.create({
        senderId,
        receiverId,
        message,
        senderType,
        messageType,
        read: false
      });
      
      // Gửi tin nhắn đến người nhận
      if (senderType === 'user') {
        // Nếu người gửi là user, gửi tin nhắn đến admin
        if (adminSocket) {
          adminSocket.emit('newMessage', {
            message: newMessage,
            userId: senderId
          });
        }
      } else {
        // Nếu người gửi là admin, gửi tin nhắn đến user
        io.to(receiverId).emit('newMessage', {
          message: newMessage
        });
      }
      
      // Gửi lại tin nhắn cho người gửi để xác nhận
      socket.emit('messageSent', {
        message: newMessage
      });
    } catch (error) {
      console.error('Error sending message:', error);
      socket.emit('error', { message: 'Không thể gửi tin nhắn' });
    }
  });
  
  // Xử lý khi admin đọc tin nhắn
  socket.on('markAsRead', async (data) => {
    try {
      const { userId } = data;
      
      // Cập nhật trạng thái đã đọc cho tin nhắn từ user
      await ChatMessage.updateMany(
        { 
          senderId: userId,
          receiverId: 'admin',
          read: false 
        },
        { read: true }
      );
      
      // Thông báo cho người gửi rằng tin nhắn đã được đọc
      io.to(userId).emit('messagesRead');
    } catch (error) {
      console.error('Error marking messages as read:', error);
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
